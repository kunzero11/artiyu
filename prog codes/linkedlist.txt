I made this for myself so I can save it in my "lessons" folder in case I need to recap, I explain to myself in stupidly simple terms what each line does, so I thought maybe it will help someone else as well, here it is:

struct node{
        int data;
        node *next;
    };
    // these are all pointers, meaning they will hold an address 
    node*n; // Will be used to create new nodes (n=new node;)
    node*t; // Will be used to link nodes (t->next=n)
    node*h; // Will hold the head of the node, i.e. the first node, used as a reference to access other nodes.

    // creating the first node
    n=new node; // n is a pointer and now holds the address of a newly created node
    n->data=1; // accessing n's data member and setting it equal to 1 
    t=n; // t is now pointing to the newly created node, will be used to link nodes 
    h=n; // h is now pointing to the newly created node and will remain so as a reference 
    
    //creating the second node 
    n=new node; // creating the second node  
    n->data=2; // the new node's member "data" is now equal 2 
    t->next=n; // t is pointing to the previous node, and we'll set it's (previous node's) "next" member which is a pointer of type "node"  to point to the newly created node
    // just like the data type "int" or "double", now our node is a data type
    t=t->next; // t will now point to whatever t's member "next" is pointing to, which is the new node (same thing as t=n, t points to n)
    // thus advancing t (to point to the newly created node)
    
    // one more node to recap  
    n=new node; // creating a new node 
    n->data=3; // setting it's member int data = 3
    t->next=n; // linking the nodes 
    t=t->next; // advancing t
    n->next=NULL; // the new node's next pointer now points to nothing, and we know it's the end of the linked list (same thing as t-<next=NULL), since t is now pointing to n as well
---------------------------------------
INSERTION
#include <iostream>

using namespace std;

// A linked list node

struct Node
{
   int data;
   struct Node *next;
};

//insert a new node in front of the list

void push(struct Node** head, int node_data)

{
   /* 1. create and allocate node */
   struct Node* newNode = new Node;

   /* 2. assign data to node */
   newNode->data = node_data;
   /* 3. set next of new node as head */
  newNode->next = (*head);
   /* 4. move the head to point to the new node */
   (*head) = newNode;
}
//insert new node after a given node

void insertAfter(struct Node* prev_node, int node_data)
{
  /*1. check if the given prev_node is NULL */
if (prev_node == NULL)
{
   cout<<"the given previous node is required,cannot be NULL"; return; } 
   /* 2. create and allocate new node */
   struct Node* newNode =new Node; 
   /* 3. assign data to the node */
   newNode->data = node_data;
   /* 4. Make next of new node as next of prev_node */
   newNode->next = prev_node->next;
    /* 5. move the next of prev_node as new_node */
    prev_node->next = newNode;
}
/* insert new node at the end of the linked list */
void append(struct Node** head, int node_data)
{
/* 1. create and allocate node */
struct Node* newNode = new Node;
struct Node *last = *head; /* used in step 5*/
/* 2. assign data to the node */
newNode->data = node_data;
/* 3. set next pointer of new node to null as its the last node*/
newNode->next = NULL;
 /* 4. if list is empty, new node becomes first node */
if (*head == NULL)
{
*head = newNode;
return;
}
/* 5. Else traverse till the last node */
while (last->next != NULL)
last = last->next;
/* 6. Change the next of last node */
last->next = newNode;
return;
}
// display linked list contents
void displayList(struct Node *node)
{
   //traverse the list to display each node
   while (node != NULL)
   {
      cout<<node->data<<"-->";
      node = node->next;
   }
if(node== NULL)
cout<<"null"; 
} 
/* main program for linked list*/
int main() 
{ 
/* empty list */
struct Node* head = NULL; 
// Insert 10.
append(&head, 10); 
// Insert 20 at the beginning. 
push(&head, 20); 
// Insert 30 at the beginning. 
push(&head, 30); 
// Insert 40 at the end. 
append(&head, 40); // 
//Insert 50, after 20. 
insertAfter(head->next, 50);
cout<<"Final linked list: "<<endl;
displayList(head);
return 0;
}
---------------------------
DELETION
#include <iostream>
using namespace std;

/* Link list node */
struct Node {
   int data;
   struct Node* next;
   };

//delete first node in the linked list
Node* deleteFirstNode(struct Node* head)
{
   if (head == NULL)
   return NULL;

   // Move the head pointer to the next node
   Node* tempNode = head;
   head = head->next;
   delete tempNode;

   return head;
}
//delete last node from linked list
Node* removeLastNode(struct Node* head)
{
   if (head == NULL)
   return NULL;

   if (head->next == NULL) {
      delete head;
      return NULL;
   }

// first find second last node
Node* second_last = head;
while (second_last->next->next != NULL)
second_last = second_last->next;

// Delete the last node
delete (second_last->next);

// set next of second_last to null
second_last->next = NULL;

return head;
}

// create linked list by adding nodes at head
void push(struct Node** head, int new_data)
{
   struct Node* newNode = new Node;
   newNode->data = new_data;
   newNode->next = (*head);
   (*head) = newNode;
}

// main function
int main()
{
   /* Start with the empty list */
   Node* head = NULL;

   // create linked list
   push(&head, 2);
   push(&head, 4);
   push(&head, 6);
   push(&head, 8);
   push(&head, 10);

         Node* temp;

   cout<<"Linked list created "<<endl; for (temp = head; temp != NULL; temp = temp->next)
   cout << temp->data << "-->";
   if(temp == NULL)
   cout<<"NULL"<<endl;

       //delete first node
   head = deleteFirstNode(head);
   cout<<"Linked list after deleting head node"<<endl; for (temp = head; temp != NULL; temp = temp->next)
   cout << temp->data << "-->";
   if(temp == NULL)
   cout<<"NULL"<<endl;

      //delete last node
   head = removeLastNode(head);
   cout<<"Linked list after deleting last node"<<endl; for (temp = head; temp != NULL; temp = temp->next)
   cout << temp->data << "-->";
   if(temp == NULL)
   cout<<"NULL";

   return 0;
}